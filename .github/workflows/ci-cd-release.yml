on:
  workflow_call:
    inputs:
      java-version:
        description: "Java version to use"
        required: false
        default: "24"
        type: string
      maven-version:
        description: "Maven version to use"
        required: false
        default: "3.9.6"
        type: string
      run-unit-tests:
        description: "Whether to run unit tests"
        required: false
        default: true
        type: boolean
      run-integration-tests:
        description: "Whether to run integration and E2E tests"
        required: false
        default: true
        type: boolean
      run-sonar-analysis:
        description: "Whether to run SonarQube analysis"
        required: false
        default: true
        type: boolean
      image-repo-name:
        description: "Name of the Docker image repository"
        required: true
        type: string
      app-name:
        description: "Name of the ArgoCD application"
        required: true
        type: string

jobs:
  format:
    name: Format Check
    runs-on: [ubuntu-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Maven & Java
        uses: unir-tfm-devops/reusable-github-actions/.github/actions/mvn-setup@main
        with:
          java-version: ${{ inputs.java-version }}
          maven-version: ${{ inputs.maven-version }}

      - name: Run Spotless Check
        run: mvn -B -ntp spotless:check

  test:
    name: Tests
    runs-on: [ubuntu-latest]
    needs: [format]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Maven & Java
        uses: unir-tfm-devops/reusable-github-actions/.github/actions/mvn-setup@main
        with:
          java-version: ${{ inputs.java-version }}
          maven-version: ${{ inputs.maven-version }}

      - name: Run Unit Tests
        if: ${{ inputs.run-unit-tests }}
        run: mvn -B -ntp clean test -Drevision=${{ github.event.release.tag_name }}

      - name: Upload target directory
        if: ${{ inputs.run-unit-tests }}
        uses: actions/upload-artifact@v4
        with:
          name: maven-target
          path: target

      - name: Run Integration & E2E Tests
        if: ${{ inputs.run-integration-tests }}
        run: mvn -B -ntp failsafe:integration-test failsafe:verify -Drevision=${{ github.event.release.tag_name }}

  sonar:
    name: SonarQube Analysis
    runs-on: [ubuntu-latest]
    needs: [test]
    if: ${{ inputs.run-sonar-analysis }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download target directory
        uses: actions/download-artifact@v4
        with:
          name: maven-target
          path: target

      - name: SonarQubeScan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [sonar]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Maven & Java
        uses: unir-tfm-devops/reusable-github-actions/.github/actions/mvn-setup@main
        with:
          java-version: ${{ inputs.java-version }}
          maven-version: ${{ inputs.maven-version }}

      - name: Package
        run: mvn -B -ntp clean package -Drevision=${{ github.event.release.tag_name }} -DskipTests=true

      - name: Docker build & push
        uses: unir-tfm-devops/reusable-github-actions/.github/actions/docker-build-push@main
        with:
          cloud-provider: aws
          image-repo-name: ${{ inputs.image-repo-name }}
          image-tag: ${{ github.event.release.tag_name }}
          aws-access-key: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-key: ${{ secrets.AWS_SECRET_KEY }}

  helm:
    name: Helm Package & Push
    runs-on: ubuntu-latest
    needs: [sonar]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Maven & Java
        uses: unir-tfm-devops/reusable-github-actions/.github/actions/mvn-setup@main
        with:
          java-version: ${{ inputs.java-version }}
          maven-version: ${{ inputs.maven-version }}

      - name: Helm package & push
        uses: unir-tfm-devops/reusable-github-actions/.github/actions/helm-package-push@main
        with:
          chart-version: ${{ github.event.release.tag_name }}
          chartmuseum-url: ${{ secrets.CHARTMUSEUM_URL }}

  deploy-test:
    name: Deploy to Test
    runs-on: [ubuntu-latest]
    needs: [docker, helm]
    environment: test
    steps:
      - name: Update version in test environment
        uses: unir-tfm-devops/reusable-github-actions/.github/actions/version-updater@main
        with:
          version: ${{ github.event.release.tag_name }}
          app-name: ${{ inputs.app-name }}
          environment: "test"
          cloud: "aws"
          app-id: ${{ vars.UNIR_TFM_APP_ID }}
          private-key: ${{ secrets.UNIR_TFM_APP_PRIVATE_KEY }}

  deploy-prod:
    name: Deploy to Production
    runs-on: [ubuntu-latest]
    needs: [deploy-test]
    environment: production
    steps:
      - name: Update version in production environment
        uses: unir-tfm-devops/reusable-github-actions/.github/actions/version-updater@main
        with:
          version: ${{ github.event.release.tag_name }}
          app-name: ${{ inputs.app-name }}
          environment: "prod"
          cloud: "aws"
          app-id: ${{ secrets.UNIR_TFM_APP_ID }}
          private-key: ${{ secrets.UNIR_TFM_APP_PRIVATE_KEY }}
