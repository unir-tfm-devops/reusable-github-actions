on:
    workflow_call:
        inputs:
            java-version:
                description: 'Java version to use'
                required: false
                default: '24'
                type: string
            maven-version:
                description: 'Maven version to use'
                required: false
                default: '3.9.6'
                type: string
            run-unit-tests:
                description: 'Whether to run unit tests'
                required: false
                default: true
                type: boolean
            run-integration-tests:
                description: 'Whether to run integration and E2E tests'
                required: false
                default: true
                type: boolean
            run-sonar-analysis:
                description: 'Whether to run SonarQube analysis'
                required: false
                default: true
                type: boolean
            app-name:
                description: 'Name of the ArgoCD application'
                required: true
                type: string
jobs:
  revision:
    name: Revision
    runs-on: [ ubuntu-latest ]
    outputs:
      revision: ${{ steps.revision.outputs.revision }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-tags: 'true'
          fetch-depth: 0

      - name: Get revision
        id: revision
        env:
          GITHUB_REF: ${{ github.ref }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: |
          if [[ "$GITHUB_REF" == "refs/tags/"* ]]; then
            echo "revision=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT
          else
            REVISION=$(git describe --tags --always)
            echo "revision=$REVISION" >> $GITHUB_OUTPUT
          fi

  format:
    name: Format Check
    runs-on: [ ubuntu-latest ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Maven & Java
        uses: unir-tfm-devops/reusable-github-actions/.github/actions/mvn-setup@main
        with:
          java-version: ${{ inputs.java-version }}
          maven-version: ${{ inputs.maven-version }}

      - name: Run Spotless Check
        run: mvn -B -ntp spotless:check

  test:
    name: Tests
    runs-on: [ ubuntu-latest ]
    needs: [ revision, format ]
    outputs:
      revision: ${{ needs.revision.outputs.revision }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Maven & Java
        uses: unir-tfm-devops/reusable-github-actions/.github/actions/mvn-setup@main
        with:
          java-version: ${{ inputs.java-version }}
          maven-version: ${{ inputs.maven-version }}

      - name: Run Unit Tests
        if: ${{ inputs.run-unit-tests }}
        run: mvn -B -ntp clean test -Drevision=${{ needs.revision.outputs.revision }}

      - name: Upload target directory
        if: ${{ inputs.run-unit-tests }}
        uses: actions/upload-artifact@v4
        with:
          name: maven-target
          path: target
      
      - name: Run Integration & E2E Tests
        if: ${{ inputs.run-integration-tests }}
        run: mvn -B -ntp failsafe:integration-test failsafe:verify -Drevision=${{ needs.revision.outputs.revision }}

  sonar:
    name: SonarQube Analysis
    runs-on: [ ubuntu-latest ]
    needs: [ test ]
    if: ${{ inputs.run-sonar-analysis }}
    outputs:
      revision: ${{ needs.test.outputs.revision }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download target directory
        uses: actions/download-artifact@v4
        with:
          name: maven-target
          path: target

      - name: SonarQubeScan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [ sonar ]
    outputs:
      revision: ${{ needs.sonar.outputs.revision }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Maven & Java
        uses: unir-tfm-devops/reusable-github-actions/.github/actions/mvn-setup@main
        with:
          java-version: ${{ inputs.java-version }}
          maven-version: ${{ inputs.maven-version }}

      - name: Package
        run: mvn -B -ntp clean package -Drevision=${{ needs.sonar.outputs.revision }} -DskipTests=true

      - name: Docker build & push
        uses: unir-tfm-devops/reusable-github-actions/.github/actions/docker-build-push@main
        with:
          image-repo-name: spring-boot-template
          image-tag: ${{ needs.sonar.outputs.revision }}
          aws-access-key: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-key: ${{ secrets.AWS_SECRET_KEY }}

  helm:
    name: Helm Package & Push
    runs-on: ubuntu-latest
    needs: [ sonar ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Helm package & push
        uses: unir-tfm-devops/reusable-github-actions/.github/actions/helm-package-push@main
        with:
          chart-version: ${{ needs.sonar.outputs.revision }}
          chartmuseum-url: ${{ secrets.CHARTMUSEUM_URL }}

  deploy-test:
    name: Deploy to Test
    runs-on: ubuntu-latest
    needs: [ docker, helm ]
    environment: test
    steps:
      - name: Update version in test environment
        uses: unir-tfm-devops/reusable-github-actions/.github/actions/version-updater@main
        with:
            version: ${{ needs.docker.outputs.revision }}
            app-name: ${{ inputs.app-name }}
            environment: 'test'
            cloud: 'aws'
            app-id: ${{ vars.UNIR_TFM_APP_ID }}
            private-key: ${{ secrets.UNIR_TFM_APP_PRIVATE_KEY }}